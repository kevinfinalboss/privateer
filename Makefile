VERSION ?= dev
BINARY_NAME = privateer
OUTPUT_DIR = bin

.PHONY: help build install clean test lint dev release

help:
	@echo "üöÄ Privateer Build System"
	@echo ""
	@echo "Comandos dispon√≠veis:"
	@echo "  build      - Compila o bin√°rio"
	@echo "  install    - Compila e instala no sistema"
	@echo "  dev        - Compila e instala vers√£o de desenvolvimento"
	@echo "  clean      - Remove arquivos de build"
	@echo "  test       - Executa testes"
	@echo "  lint       - Executa linter"
	@echo "  release    - Cria release para m√∫ltiplas plataformas"
	@echo ""
	@echo "Exemplos:"
	@echo "  make install VERSION=v1.0.0"
	@echo "  make dev"
	@echo "  make release"

build:
	@echo "üî® Compilando Privateer..."
	@chmod +x scripts/build.sh
	@./scripts/build.sh $(VERSION)

install: build
	@echo "‚úÖ Build e instala√ß√£o conclu√≠dos!"

dev:
	@echo "üöß Instalando vers√£o de desenvolvimento..."
	@chmod +x scripts/build.sh
	@./scripts/build.sh dev

clean:
	@echo "üßπ Limpando arquivos de build..."
	@rm -rf $(OUTPUT_DIR)
	@echo "‚úÖ Limpeza conclu√≠da!"

test:
	@echo "üß™ Executando testes..."
	@go test -v ./...

lint:
	@echo "üîç Executando linter..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "‚ö†Ô∏è  golangci-lint n√£o encontrado, usando go vet"; \
		go vet ./...; \
	fi

release:
	@echo "üì¶ Criando release para m√∫ltiplas plataformas..."
	@mkdir -p $(OUTPUT_DIR)
	@echo "üî® Compilando para Linux AMD64..."
	@GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Version=$(VERSION)" -o $(OUTPUT_DIR)/$(BINARY_NAME)_linux_amd64 ./cmd/privateer
	@echo "üî® Compilando para Linux ARM64..."
	@GOOS=linux GOARCH=arm64 go build -ldflags="-X main.Version=$(VERSION)" -o $(OUTPUT_DIR)/$(BINARY_NAME)_linux_arm64 ./cmd/privateer
	@echo "üî® Compilando para macOS AMD64..."
	@GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.Version=$(VERSION)" -o $(OUTPUT_DIR)/$(BINARY_NAME)_darwin_amd64 ./cmd/privateer
	@echo "üî® Compilando para macOS ARM64..."
	@GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.Version=$(VERSION)" -o $(OUTPUT_DIR)/$(BINARY_NAME)_darwin_arm64 ./cmd/privateer
	@echo "üî® Compilando para Windows AMD64..."
	@GOOS=windows GOARCH=amd64 go build -ldflags="-X main.Version=$(VERSION)" -o $(OUTPUT_DIR)/$(BINARY_NAME)_windows_amd64.exe ./cmd/privateer
	@echo "‚úÖ Release criado em $(OUTPUT_DIR)/"
	@ls -la $(OUTPUT_DIR)/

run:
	@go run cmd/privateer/main.go $(ARGS)

scan-cluster:
	@go run cmd/privateer/main.go scan cluster --dry-run

scan-github:
	@go run cmd/privateer/main.go scan github --dry-run

deps:
	@echo "üì¶ Atualizando depend√™ncias..."
	@go mod download
	@go mod tidy