package cli

import (
	"os"
	"path/filepath"

	"github.com/kevinfinalboss/privateer/internal/logger"
	"github.com/spf13/cobra"
)

var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Inicializa configura√ß√£o do Privateer",
	Long:  "Cria arquivo de configura√ß√£o inicial para o Privateer",
	PreRunE: func(cmd *cobra.Command, args []string) error {
		if log == nil {
			log = logger.New()
		}

		log.Info("app_started").
			Str("version", "v0.1.0").
			Str("operation", "init").
			Send()

		return nil
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		return initConfig()
	},
}

func initConfig() error {
	home, err := os.UserHomeDir()
	if err != nil {
		log.Error("operation_failed").Err(err).Send()
		return err
	}

	configDir := filepath.Join(home, ".privateer")
	configFile := filepath.Join(configDir, "config.yaml")

	if err := os.MkdirAll(configDir, 0755); err != nil {
		log.Error("operation_failed").Err(err).Send()
		return err
	}

	exampleConfig := `# üè¥‚Äç‚ò†Ô∏è Privateer Configuration
# Configura√ß√£o dos registries de destino para migra√ß√£o

registries:
  # Registry Docker Local (prioridade alta)
  - name: "docker-local"
    type: "docker"
    enabled: true
    priority: 10  # Prioridade mais alta (0-100, maior = mais priorit√°rio)
    url: "https://registry.example.com"  # ou http:// para insecure
    username: "admin"
    password: "password123"
    insecure: false  # true para HTTP sem SSL
    
  # Harbor Registry (prioridade m√©dia-alta)
  - name: "harbor-prod"
    type: "harbor"
    enabled: false
    priority: 8
    url: "https://harbor.company.com"
    username: "admin"
    password: "Harbor12345"
    project: "library"  # Projeto do Harbor
    insecure: false
    
  # AWS ECR com Credenciais Diretas (prioridade m√©dia)
  - name: "ecr-credentials"
    type: "ecr"
    enabled: true
    priority: 5
    region: "us-east-1"
    account_id: "123456789012"  # Opcional - descoberto automaticamente
    access_key: "AKIAIOSFODNN7EXAMPLE"
    secret_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    
  # AWS ECR com Profiles (prioridade m√©dia-baixa)
  - name: "ecr-profiles"
    type: "ecr"
    enabled: false
    priority: 3
    region: "us-east-1"
    account_id: "503935937141"  # Obrigat√≥rio para filtrar profiles
    profiles:  # Lista de profiles para tentar em ordem
      - "production"
      - "default"
      - "company-aws"
    
  # AWS ECR com Credenciais Padr√£o (prioridade baixa)
  - name: "ecr-default"
    type: "ecr"
    enabled: false
    priority: 2
    region: "us-east-1"
    # account_id ser√° descoberto automaticamente
    # Usa: ~/.aws/credentials, IAM roles, env vars
    
  # GitHub Container Registry (prioridade baixa)
  - name: "ghcr-company"
    type: "ghcr"
    enabled: false
    priority: 1
    username: "your-github-user"
    password: "ghp_your_github_token"
    project: "your-organization"  # Nome da organiza√ß√£o

# Configura√ß√£o do Kubernetes
kubernetes:
  context: ""  # Deixe vazio para usar o contexto atual do kubectl
  namespaces: []  # Liste namespaces espec√≠ficos ou deixe vazio para todos
  # Exemplo:
  # namespaces:
  #   - "default"
  #   - "production" 
  #   - "staging"

# Configura√ß√£o do GitHub (futuro - v0.3.0)
github:
  token: ""  # Token do GitHub para scan de reposit√≥rios
  organization: ""  # Sua organiza√ß√£o no GitHub
  repositories: []  # Reposit√≥rios espec√≠ficos ou vazio para todos

# Configura√ß√µes gerais da aplica√ß√£o
settings:
  language: "pt-BR"     # pt-BR, en-US, es-ES
  log_level: "info"     # debug, info, warn, error
  dry_run: false        # true para simular sem fazer altera√ß√µes
  concurrency: 3        # N√∫mero de migra√ß√µes simult√¢neas (1-10)
  # CONFIGURA√á√ÉO CR√çTICA: Define comportamento dos registries
  multiple_registries: false  # false = apenas 1 registry (maior prioridade)
                              # true = todos os registries habilitados

# Configura√ß√£o de Webhooks
webhooks:
  discord:
    enabled: false  # true para habilitar notifica√ß√µes Discord
    url: ""        # URL do webhook Discord
    name: "Privateer üè¥‚Äç‚ò†Ô∏è"  # Nome do bot (opcional)
    avatar: ""     # URL do avatar (opcional)

# Configura√ß√£o avan√ßada para detec√ß√£o de imagens
image_detection:
  # Registries que voc√™ FOR√áA como p√∫blicos (al√©m dos padr√µes)
  custom_public_registries:
    - "quay.io/prometheus"
    - "registry.k8s.io"
    - "public.ecr.aws"
    - "docker.io/library"
    - "mcr.microsoft.com"
    - "gcr.io/google-containers"
    
  # Registries que voc√™ FOR√áA como privados
  custom_private_registries:
    - "mycompany.azurecr.io"
    - "ghcr.io/mycompany"
    - "harbor.mycompany.com"
    - "registry.example.com"
    - "docker.io/mycompany"
    
  # Registries para IGNORAR completamente no scan
  ignore_registries:
    - "localhost"
    - "127.0.0.1"
    - "registry.local"
    - "kind-registry:5000"

# üìù DOCUMENTA√á√ÉO COMPLETA DE USO:
#
# üéØ SISTEMA DE PRIORIDADE:
# - priority: 0-100 (maior n√∫mero = maior prioridade)
# - Apenas registries com enabled: true s√£o considerados
# - Se multiple_registries: false ‚Üí apenas o de maior prioridade recebe
# - Se multiple_registries: true ‚Üí TODOS os habilitados recebem
#
# Exemplo de cen√°rio com sua configura√ß√£o:
# - docker-local: enabled=true, priority=10
# - ecr-credentials: enabled=true, priority=5  
# - harbor-prod: enabled=false, priority=8
#
# Resultado com multiple_registries: false ‚Üí apenas docker-local
# Resultado com multiple_registries: true ‚Üí docker-local + ecr-credentials
#
# üîß CAMPOS DE CONFIGURA√á√ÉO POR TIPO:
#
# DOCKER REGISTRY:
# - url: URL completa (https://registry.example.com)
# - username: Nome de usu√°rio
# - password: Senha
# - insecure: true para HTTP sem SSL
#
# HARBOR REGISTRY:
# - url: URL completa (https://harbor.company.com)
# - username: Nome de usu√°rio do Harbor
# - password: Senha do Harbor
# - project: Projeto do Harbor (padr√£o: "library")
# - insecure: true para HTTP sem SSL
#
# AWS ECR:
# - region: Regi√£o AWS (us-east-1, eu-west-1, etc.)
# - account_id: ID da conta AWS (opcional, descoberto automaticamente)
# - access_key: Chave de acesso AWS (m√©todo 1)
# - secret_key: Chave secreta AWS (m√©todo 1)
# - profiles: Lista de profiles ~/.aws/credentials (m√©todo 2)
# - (m√©todo 3: credenciais padr√£o do ambiente - sem campos extras)
#
# GITHUB CONTAINER REGISTRY:
# - username: Seu usu√°rio GitHub
# - password: Token GitHub (ghp_...)
# - project: Nome da organiza√ß√£o GitHub
#
# üîî WEBHOOKS DISCORD:
# 1. Crie um webhook no seu servidor Discord:
#    - Configura√ß√µes do Servidor ‚Üí Integra√ß√µes ‚Üí Webhooks ‚Üí Novo Webhook
# 2. Copie a URL do webhook
# 3. Configure enabled: true e cole a URL
# 4. O Privateer enviar√° notifica√ß√µes de in√≠cio, fim e erros
#
# üìä NOTIFICA√á√ïES INCLUEM:
# - In√≠cio da migra√ß√£o (quantas imagens, quais registries)
# - Progresso em tempo real 
# - Resultado final (sucessos, falhas, ignoradas)
# - Exemplos de migra√ß√µes realizadas
# - Detalhes de erros quando ocorrem
#
# üöÄ COMANDOS ESSENCIAIS:
# privateer init                          # Gerar esta configura√ß√£o
# privateer scan cluster                  # Listar imagens p√∫blicas
# privateer scan cluster --dry-run        # Simular scan
# privateer migrate cluster --dry-run     # Simular migra√ß√£o + Discord
# privateer migrate cluster               # Executar migra√ß√£o + Discord
# privateer migrate cluster --log-level debug  # Logs detalhados
#
# ‚öôÔ∏è AWS ECR - 3 M√âTODOS DE AUTENTICA√á√ÉO:
#
# M√âTODO 1: Credenciais Diretas (menos seguro, para testes)
# - access_key: "AKIAIOSFODNN7EXAMPLE"
# - secret_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
#
# M√âTODO 2: Profiles AWS (recomendado para m√∫ltiplas contas)
# - profiles: ["production", "default", "company-aws"]
# - account_id: "503935937141"  # Obrigat√≥rio para filtrar profiles
#
# M√âTODO 3: Credenciais Padr√£o (mais seguro para produ√ß√£o)
# - IAM Roles (EC2/ECS/Lambda)
# - Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
# - ~/.aws/credentials com profile [default]
#
# üîç VALIDA√á√ÉO ANTI-DUPLICA√á√ÉO:
# - Verifica se imagem j√° existe antes de migrar
# - ECR: cria reposit√≥rios automaticamente se necess√°rio
# - Docker/Harbor: verifica manifests via API
# - Evita sobrescrever imagens existentes
# - Logs detalhados de duplica√ß√µes detectadas
#
# üéÆ CEN√ÅRIOS DE TESTE PR√ÅTICOS:
#
# CEN√ÅRIO 1: Registry √∫nico (modo conservador)
# multiple_registries: false
# enabled: docker-local=true, ecr-credentials=true
# priority: docker-local=10, ecr-credentials=5
# Resultado: apenas docker-local recebe (maior prioridade)
#
# CEN√ÅRIO 2: M√∫ltiplos registries (modo backup/redund√¢ncia)
# multiple_registries: true
# enabled: docker-local=true, ecr-credentials=true
# Resultado: AMBOS recebem a mesma imagem
#
# CEN√ÅRIO 3: Failover autom√°tico
# enabled: docker-local=false, ecr-credentials=true
# Resultado: ecr-credentials recebe (√∫nico habilitado)
#
# CEN√ÅRIO 4: Teste com Harbor
# enabled: harbor-prod=true, priority=8
# multiple_registries: false
# Resultado: harbor-prod recebe se for o de maior prioridade habilitado
#
# üí° DICAS DE CONFIGURA√á√ÉO:
# - Use priority 10 para registry principal de produ√ß√£o
# - Use priority 5-8 para registries secund√°rios  
# - Use priority 1-3 para registries de backup/teste
# - Deixe enabled=false em registries n√£o utilizados no momento
# - Configure Discord para monitorar migra√ß√µes importantes em produ√ß√£o
# - Use insecure=true apenas em ambientes de desenvolvimento local
# - Para ECR, prefira profiles ou IAM roles em vez de credenciais diretas
#
# üîí SEGURAN√áA E BOAS PR√ÅTICAS:
# - Senhas em texto plano apenas para desenvolvimento/teste
# - Use profiles AWS ou IAM roles em produ√ß√£o
# - Configure HTTPS (insecure=false) sempre que poss√≠vel
# - Monitore logs para tentativas de acesso n√£o autorizadas
# - Rotacione credenciais regularmente
# - Use tokens GitHub com escopo m√≠nimo necess√°rio
# - Mantenha backups das configura√ß√µes importantes
#
# üîß DETEC√á√ÉO AUTOM√ÅTICA DE REGISTRIES:
# 
# P√öBLICOS (detectados automaticamente):
# - docker.io/* (DockerHub)
# - quay.io/* (Red Hat Quay)
# - registry.k8s.io/* (Kubernetes)
# - public.ecr.aws/* (AWS ECR Public)
# - mcr.microsoft.com/* (Microsoft)
#
# PRIVADOS (detectados automaticamente):
# - *.dkr.ecr.*.amazonaws.com/* (AWS ECR Private)
# - *.azurecr.io/* (Azure Container Registry)
# - *.gcr.io/* e *.pkg.dev/* (Google Container Registry)
# - ghcr.io/*/* (GitHub Container Registry com org)
# - qualquer.dominio.com/* (registries com dom√≠nio customizado)
#
# Use as configura√ß√µes custom_* acima para sobrescrever a detec√ß√£o autom√°tica.
`

	if _, err := os.Stat(configFile); err == nil {
		log.Warn("config_already_exists").Str("file", configFile).Send()
		log.Info("config_location").Str("file", configFile).Send()
		log.Info("config_edit_tip").
			Str("message", "Edite o arquivo para configurar seus registries").
			Send()
		return nil
	}

	if err := os.WriteFile(configFile, []byte(exampleConfig), 0644); err != nil {
		log.Error("operation_failed").Err(err).Send()
		return err
	}

	log.Info("config_created").Str("file", configFile).Send()
	log.Info("config_next_steps").
		Str("message", "1. Edite o arquivo de configura√ß√£o").
		Send()
	log.Info("config_next_steps").
		Str("message", "2. Configure seus registries de destino").
		Send()
	log.Info("config_next_steps").
		Str("message", "3. Defina prioridades (priority: 0-100)").
		Send()
	log.Info("config_next_steps").
		Str("message", "4. Habilite os registries (enabled: true)").
		Send()
	log.Info("config_next_steps").
		Str("message", "5. Configure multiple_registries (true/false)").
		Send()
	log.Info("config_next_steps").
		Str("message", "6. Configure Discord webhook (opcional)").
		Send()
	log.Info("config_next_steps").
		Str("message", "7. Execute: privateer migrate cluster --dry-run").
		Send()
	log.Info("operation_completed").Str("operation", "init").Send()

	return nil
}
